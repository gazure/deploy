AWSTemplateFormatVersion: "2010-09-09"

Description: >
    Provisions a VPC Subnets, and Routing resources

Parameters:
    FullAZDeploy:
        Description: True will deploy to 3 AZs, False will only deploy to 1
        Type: String
        AllowedValues:
            - true
            - false
        Default: false

Conditions:
    ShouldDeployToAllAZs: !Equals [ !Ref FullAZDeploy, "true" ]

Mappings:

    One:
        us-west-2:
            AZ: us-west-2a
    Two:
        us-west-2:
            AZ: us-west-2b
    Three:
        us-west-2:
            AZ: us-west-2c

Resources:

    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.0.0.0/16
            EnableDnsSupport: true
            Tags:
                - Key: Name
                  Value: GrantVPC
                - Key: Application
                  Value: !Ref AWS::StackName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: GrantIGW
                - Key: Application
                  Value: !Ref AWS::StackName

    AttachGateway:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref VPC
            InternetGatewayId: !Ref InternetGateway

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !FindInMap [One, !Ref "AWS::Region", AZ]
            CidrBlock: 10.0.0.0/19
            VpcId: !Ref VPC
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: PublicSubnet1
                - Key: Application
                  Value: !Ref AWS::StackName

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !FindInMap [Two, !Ref "AWS::Region", AZ]
            CidrBlock: 10.0.32.0/19
            VpcId: !Ref VPC
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: PublicSubnet2
                - Key: Application
                  Value: !Ref AWS::StackName

    PublicSubnet3:
        Type: AWS::EC2::Subnet
        Condition: ShouldDeployToAllAZs
        Properties:
            AvailabilityZone: !FindInMap [Three, !Ref "AWS::Region", AZ]
            CidrBlock: 10.0.64.0/19
            VpcId: !Ref VPC
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: PublicSubnet3
                - Key: Application
                  Value: !Ref AWS::StackName

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: GrantPublicRT
                - Key: Application
                  Value: !Ref AWS::StackName

    PublicIGWRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    SubnetRouteTableAssociation1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet1
            RouteTableId: !Ref PublicRouteTable

    SubnetRouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicSubnet2
            RouteTableId: !Ref PublicRouteTable

    SubnetRouteTableAssociation3:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Condition: ShouldDeployToAllAZs
        Properties:
            SubnetId: !Ref PublicSubnet3
            RouteTableId: !Ref PublicRouteTable

    EIP1:
        Type: AWS::EC2::EIP
        Properties:
            Domain: "vpc"

    EIP2:
        Type: AWS::EC2::EIP
        Properties:
            Domain: "vpc"

    EIP3:
        Type: AWS::EC2::EIP
        Condition: ShouldDeployToAllAZs
        Properties:
            Domain: "vpc"

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt [EIP1, AllocationId]
            SubnetId: !Ref PublicSubnet1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt [EIP2, AllocationId]
            SubnetId: !Ref PublicSubnet2

    NatGateway3:
        Type: AWS::EC2::NatGateway
        Condition: ShouldDeployToAllAZs
        Properties:
            AllocationId: !GetAtt [EIP3, AllocationId]
            SubnetId: !Ref PublicSubnet3

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !FindInMap [One, !Ref "AWS::Region", AZ]
            CidrBlock: 10.0.96.0/19
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: PrivateSubnet1
                - Key: Application
                  Value: !Ref AWS::StackName

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !FindInMap [Two, !Ref "AWS::Region", AZ]
            CidrBlock: 10.0.128.0/19
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: PrivateSubnet2
                - Key: Application
                  Value: !Ref AWS::StackName

    PrivateSubnet3:
        Type: AWS::EC2::Subnet
        Condition: ShouldDeployToAllAZs
        Properties:
            AvailabilityZone: !FindInMap [Three, !Ref "AWS::Region", AZ]
            CidrBlock: 10.0.160.0/19
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: PrivateSubnet3
                - Key: Application
                  Value: !Ref AWS::StackName

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: GrantPrivateRT1
                - Key: Application
                  Value: !Ref AWS::StackName

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: GrantPrivateRT2
                - Key: Application
                  Value: !Ref AWS::StackName

    PrivateRouteTable3:
        Type: AWS::EC2::RouteTable
        Condition: ShouldDeployToAllAZs
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: GrantPrivateRT3
                - Key: Application
                  Value: !Ref AWS::StackName

    PrivateNGWRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateNGWRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateNGWRoute3:
        Type: AWS::EC2::Route
        Condition: ShouldDeployToAllAZs
        Properties:
            RouteTableId: !Ref PrivateRouteTable3
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway3

    PrivateSubnetRouteTableAssociation1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet1
            RouteTableId: !Ref PrivateRouteTable1

    PrivateSubnetRouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet2
            RouteTableId: !Ref PrivateRouteTable2
            

    PrivateSubnetRouteTableAssociation3:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Condition: ShouldDeployToAllAZs
        Properties:
            SubnetId: !Ref PrivateSubnet3
            RouteTableId: !Ref PrivateRouteTable3


Outputs:
    VPCID:
        Description: VPC physical id
        Value: !Ref VPC
        Export:
            Name: !Sub ${AWS::StackName}-vpc-id
    PrivateSubnets:
        Description: List of Private Subnets
        Value: !Join [ ",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2] ]
        Export:
            Name: !Sub ${AWS::StackName}-private-subnets

    PublicSubnets:
        Description: List of Public Subnets
        Value: !Join [ ",", [!Ref PublicSubnet1, !Ref PublicSubnet2] ]
        Export:
            Name: !Sub ${AWS::StackName}-public-subnets

    AvailabilityZones:
        Description: List of Availability Zones Available
        Value: !If [ShouldDeployToAllAZs, "us-west-2a,us-west-2b,us-west-2c", "us-west-2a,us-west-2b"]
        Export:
            Name: !Sub ${AWS::StackName}-availability-zones
